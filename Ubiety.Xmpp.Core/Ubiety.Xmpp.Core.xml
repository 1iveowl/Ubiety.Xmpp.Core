<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ubiety.Xmpp.Core</name>
    </assembly>
    <members>
        <member name="T:Ubiety.Xmpp.Core.Attributes.XmppTagAttribute">
            <summary>
                XMPP tag attribute
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Attributes.XmppTagAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Attributes.XmppTagAttribute"/> class
            </summary>
            <param name="localName">local name of the tag</param>
            <param name="namespaceName">namespace name of the tag</param>
            <param name="tagType">Class type of the tag</param>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Attributes.XmppTagAttribute.Name">
            <summary>
                Gets the name of the tag
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Attributes.XmppTagAttribute.TagType">
            <summary>
                Gets the class type of the tag
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Common.DataEventArgs">
            <inheritdoc />
            <summary>
                Socket data event arguments
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.DataEventArgs.Message">
            <summary>
                Gets or sets the message from the server
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Common.Jid">
            <inheritdoc />
            <summary>
                JID class
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /> class
            </summary>
            <param name="id">String version of the ID</param>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.Jid.Resource">
            <summary>
                Gets the JID resource
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.Jid.Server">
            <summary>
                Gets the server of the JID
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.Jid.User">
            <summary>
                Gets the user name of the JID
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.Jid.Id">
            <summary>
                Gets or sets the id as a string
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.Equals(Ubiety.Xmpp.Core.Common.Jid)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.op_Implicit(System.String)~Ubiety.Xmpp.Core.Common.Jid">
            <summary>
                Implicitly converts a string into a <see cref="T:Ubiety.Xmpp.Core.Common.Jid" />
            </summary>
            <param name="id">String version of the ID</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.op_Implicit(Ubiety.Xmpp.Core.Common.Jid)~System.String">
            <summary>
                Implicitly converts a <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /> to a string
            </summary>
            <param name="id"><see cref="T:Ubiety.Xmpp.Core.Common.Jid" /> of the ID</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.op_Equality(Ubiety.Xmpp.Core.Common.Jid,Ubiety.Xmpp.Core.Common.Jid)">
            <summary>
                Compares equality of one <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /> to another
            </summary>
            <param name="one">First <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /></param>
            <param name="two">Second <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /></param>
            <returns>True if the Jids are equal</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.op_Inequality(Ubiety.Xmpp.Core.Common.Jid,Ubiety.Xmpp.Core.Common.Jid)">
            <summary>
                Compares the inequality of one <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /> to another
            </summary>
            <param name="one">First <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /></param>
            <param name="two">Second <see cref="T:Ubiety.Xmpp.Core.Common.Jid" /></param>
            <returns>True if the Jids are not equal</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.Jid.ToString">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.Common.Namespaces">
            <summary>
                XML namespaces for tags
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Common.Namespaces.Stream">
            <summary>
                Stream namespace
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Common.Namespaces.Client">
            <summary>
                Client namespace
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Common.TagEventArgs">
            <summary>
                Tag event arguments
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.TagEventArgs.Tag">
            <summary>
                Tag to send
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Common.XmppBase">
            <summary>
                Base XMPP implementation
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Common.XmppBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Common.XmppBase"/> class
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.Port">
            <inheritdoc cref="T:Ubiety.Xmpp.Core.IClient" />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.UseSsl">
            <inheritdoc cref="T:Ubiety.Xmpp.Core.IClient" />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.UseIPv6">
            <inheritdoc cref="T:Ubiety.Xmpp.Core.IClient" />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.State">
            <summary>
                Gets or sets the current state
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.Registry">
            <summary>
                Gets the tag registry
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Common.XmppBase.ClientSocket">
            <summary>
                Gets or sets the client socket
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.IClient">
            <summary>
                Defines a client interface
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.IClient.Id">
            <summary>
                Gets or sets the user JID
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.IClient.Port">
            <summary>
                Gets or sets the port of the server
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.IClient.UseSsl">
            <summary>
                Gets a value indicating whether the socket should use SSL
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.IClient.UseIPv6">
            <summary>
                Gets a value indicating whether the socket should use IPv6
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.IClient.Connect(Ubiety.Xmpp.Core.Common.Jid)">
            <summary>
                Connect to an XMPP server using a JID
            </summary>
            <param name="jid"><see cref="T:Ubiety.Xmpp.Core.Common.Jid"/> to use for connecting</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Infrastructure.Extensions.AssemblyExtensions">
            <summary>
                Assembly class extensions
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Extensions.AssemblyExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
               Gets all attributes of a specific type from the assembly
            </summary>
            <typeparam name="T">Type of the attribute to retrieve</typeparam>
            <param name="assembly">Assembly to iterate</param>
            <returns>Enumerable of attributes</returns>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Infrastructure.Extensions.ByteExtensions">
            <summary>
                Byte extension methods
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Extensions.ByteExtensions.TrimNullBytes(System.Collections.Generic.IList{System.Byte})">
            <summary>
                Trims null byte values from the end of an array
            </summary>
            <param name="bytes">Byte array to trim</param>
            <returns>Trimmed array</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Extensions.ByteExtensions.Clear(System.Byte[])">
            <summary>
                Clears a byte array
            </summary>
            <param name="data">Byte array to clear</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Infrastructure.Extensions.EnumerableExtensions">
            <summary>
                Enumerable extensions
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Extensions.EnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Applies an action on each item in the enumerable
            </summary>
            <typeparam name="T">Type of the item</typeparam>
            <param name="enumerable">Enumerable to iterate</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Infrastructure.Parser">
            <summary>
                XMPP protocol parser
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Parser.#ctor(Ubiety.Xmpp.Core.Common.XmppBase)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Infrastructure.Parser" /> class
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Infrastructure.Parser.Context">
            <summary>
                Gets the current XML context
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Infrastructure.Parser.NamespaceManager">
            <summary>
                Gets the current XML namespace manager
            </summary>
        </member>
        <member name="E:Ubiety.Xmpp.Core.Infrastructure.Parser.Tag">
            <summary>
                Tag event
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Parser.Start">
            <summary>
                Starts the parsing process
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Parser.Stop">
            <summary>
                Stop the parsing process
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Infrastructure.Parser.OnTag(Ubiety.Xmpp.Core.Tags.Tag)">
            <summary>
                Raise the tag event
            </summary>
            <param name="tag">Tag to send</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Logging.ILog">
            <summary>
                Defines an interface for logging
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.ILog.Log(Ubiety.Xmpp.Core.Logging.LogLevel,System.Object)">
            <summary>
                Log a generic message
            </summary>
            <param name="level">Severity level of the message</param>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.ILog.Log(Ubiety.Xmpp.Core.Logging.LogLevel,System.Exception,System.Object)">
            <summary>
                Log a message with an exception
            </summary>
            <param name="level">Severity level of the message</param>
            <param name="exception">Exception to log</param>
            <param name="message">Message to log</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Logging.ILogManager">
            <summary>
                Defines the interface for the log manager
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.ILogManager.GetLogger(System.String)">
            <summary>
                Get a log instance for the requested name
            </summary>
            <param name="name">Name of the instance</param>
            <returns>Instance of a log</returns>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Logging.Log">
            <summary>
                Central log class
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.Get``1">
            <summary>
                Gets a logger for the type
            </summary>
            <typeparam name="T">Type to get a logger for</typeparam>
            <returns>Logger for the type</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.Get(System.Type)">
            <summary>
                Gets a logger for the type
            </summary>
            <param name="type">Type to get a logger for</param>
            <returns>Logger for the type</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.Get(System.String)">
            <summary>
                Gets a logger for the type name
            </summary>
            <param name="name">Name of the type</param>
            <returns>Logger for the type name</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.NameFor``1">
            <summary>
                Gets the name of the type
            </summary>
            <typeparam name="T">Type to get the name for</typeparam>
            <returns>Name of the type</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.NameFor(System.Type)">
            <summary>
                Gets the name of the type
            </summary>
            <param name="type">Type to get the name for</param>
            <returns>Name of the type</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Logging.Log.DefaultManager.GetLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.Logging.LogLevel">
            <summary>
                Log severity level
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Logging.LogLevel.Critical">
            <summary>
                Critical severity
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Logging.LogLevel.Error">
            <summary>
                Error severity
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Logging.LogLevel.Warning">
            <summary>
                Warning severity
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Logging.LogLevel.Information">
            <summary>
                Information severity
            </summary>
        </member>
        <member name="F:Ubiety.Xmpp.Core.Logging.LogLevel.Debug">
            <summary>
                Debug severity
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Net.Address">
            <summary>
                Address class
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.Address.#ctor(Ubiety.Xmpp.Core.IClient)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Net.Address" /> class
            </summary>
            <param name="client"><see cref="T:Ubiety.Xmpp.Core.IClient"/> for configuration</param>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Net.Address.IsIPv6">
            <summary>
                Gets a value indicating whether the address is IPv6
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Net.Address.Hostname">
            <summary>
                Gets the hostname of the address
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.Address.NextIpAddress">
            <summary>
                Gets the next IP address for the server
            </summary>
            <returns><see cref="T:System.Net.IPAddress" /> of the XMPP server</returns>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Net.AsyncClientSocket">
            <summary>
                An asynchronous socket for connecting to an XMPP server
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.#ctor(Ubiety.Xmpp.Core.IClient)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Net.AsyncClientSocket" /> class
            </summary>
            <param name="client">Client to use for the server connection</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Dispose">
            <inheritdoc />
        </member>
        <member name="E:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Data">
            <inheritdoc />
        </member>
        <member name="E:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Connection">
            <inheritdoc />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Connected">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Connect(Ubiety.Xmpp.Core.Common.Jid)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Send(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.OnData(Ubiety.Xmpp.Core.Common.DataEventArgs)">
            <summary>
                Raise the data event with the specified arguments
            </summary>
            <param name="e">Data event arguments</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.OnConnection">
            <summary>
                Raise the connection event
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.AsyncClientSocket.Dispose(System.Boolean)">
            <summary>
                Dispose of class resources
            </summary>
            <param name="disposing">Are we disposing from a direct call</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Net.ISocket">
            <summary>
                Defines a socket interface
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Net.ISocket.Connected">
            <summary>
                Gets a value indicating whether the socket is connected
            </summary>
        </member>
        <member name="E:Ubiety.Xmpp.Core.Net.ISocket.Data">
            <summary>
                Raised when data is received from the server
            </summary>
        </member>
        <member name="E:Ubiety.Xmpp.Core.Net.ISocket.Connection">
            <summary>
                Raised when the socket is connected to the server
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.ISocket.Connect(Ubiety.Xmpp.Core.Common.Jid)">
            <summary>
                Connect to an XMPP server
            </summary>
            <param name="jid"><see cref="T:Ubiety.Xmpp.Core.Common.Jid"/> of the user</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.ISocket.Disconnect">
            <summary>
                Disconnects from the server
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Net.ISocket.Send(System.String)">
            <summary>
                Send a message to the server
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Registries.TagRegistry">
            <summary>
                Tag registry
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Registries.TagRegistry.AddAssembly(System.Reflection.Assembly)">
            <summary>
                Add tags from the assembly to the registry
            </summary>
            <param name="assembly">Assembly to add tags from</param>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Registries.TagRegistry.GetTag``1(System.String,System.String)">
            <summary>
                Retrieves a tag from the registry
            </summary>
            <typeparam name="T">Type of tag to retrieve</typeparam>
            <param name="name">Name of the tag</param>
            <param name="ns">Namespace of the tag</param>
            <returns>Tag requested from the registry</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Registries.TagRegistry.GetTag``1(System.Xml.Linq.XName)">
            <summary>
                Retrieves a tag from the registry
            </summary>
            <typeparam name="T">Type of tag to retrieve</typeparam>
            <param name="name">XML name of the tag</param>
            <returns>Tag requested from the registry</returns>
        </member>
        <member name="T:Ubiety.Xmpp.Core.States.ConnectedState">
            <summary>
                Connected to the server state
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.States.ConnectedState.Execute(Ubiety.Xmpp.Core.Common.XmppBase,Ubiety.Xmpp.Core.Tags.Tag)">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.States.ConnectingState">
            <summary>
                Connecting state for the protocol
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.States.ConnectingState.Execute(Ubiety.Xmpp.Core.Common.XmppBase,Ubiety.Xmpp.Core.Tags.Tag)">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.States.DisconnectedState">
            <summary>
                Disconnected state
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.States.DisconnectedState.Execute(Ubiety.Xmpp.Core.Common.XmppBase,Ubiety.Xmpp.Core.Tags.Tag)">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.States.IState">
            <summary>
                Describes a state
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.States.IState.Execute(Ubiety.Xmpp.Core.Common.XmppBase,Ubiety.Xmpp.Core.Tags.Tag)">
            <summary>
                Executes the current state
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Tags.Stanza">
            <summary>
                Defines an XMPP stanza
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Stanza.#ctor(System.Xml.Linq.XName)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Tags.Stanza"/> class
            </summary>
            <param name="name">Name of the tag with namespace</param>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Stanza.#ctor(System.Xml.Linq.XElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Tags.Stanza"/> class
            </summary>
            <param name="other">Tag to create the stanza with</param>
            <inheritdoc />
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stanza.To">
            <summary>
                Gets or sets the JID of the user receiving the message
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stanza.From">
            <summary>
                Gets or sets the JID of the user sending the message
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stanza.Id">
            <summary>
                Gets or sets the stanza id
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Tags.Stream">
            <summary>
                XMPP Stream tag
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Stream.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Tags.Stream"/> class
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Stream.#ctor(System.Xml.Linq.XElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.Tags.Stream"/> class
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stream.XmlName">
            <summary>
                Gets the XML name of the tag
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stream.Version">
            <summary>
                Gets or sets the stream version
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stream.Namespace">
            <summary>
                Gets or sets the stream namespace
            </summary>
        </member>
        <member name="P:Ubiety.Xmpp.Core.Tags.Stream.StartTag">
            <summary>
                Gets the start tag of the stream
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.Tags.Tag">
            <summary>
                An XMPP tag
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.#ctor(System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.#ctor(System.Xml.Linq.XName)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.#ctor(System.Xml.Linq.XName,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.#ctor(System.Xml.Linq.XName,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.#ctor(System.Xml.Linq.XStreamingElement)">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.Tags.Tag.GetAttributeValue(System.Xml.Linq.XName)">
            <summary>
                Gets the value of a tag attribute
            </summary>
            <param name="name">Name of the attribute</param>
            <returns>String contents of the attribute</returns>
        </member>
        <member name="T:Ubiety.Xmpp.Core.XmppBuilder">
            <summary>
                Builds an XMPP connection
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppBuilder.Begin">
            <summary>
                Begins the build process
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppBuilder.BuildClient">
            <summary>
                Build a client connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppBuilder.BuildServer">
            <summary>
                Build a server connection
            </summary>
        </member>
        <member name="T:Ubiety.Xmpp.Core.XmppClient">
            <summary>
                Main XMPP client class
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClient.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ubiety.Xmpp.Core.XmppClient" /> class
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Ubiety.Xmpp.Core.XmppClient.Id">
            <inheritdoc />
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClient.Connect(Ubiety.Xmpp.Core.Common.Jid)">
            <inheritdoc />
        </member>
        <member name="T:Ubiety.Xmpp.Core.XmppClientBuilder">
            <summary>
                Builds a new XmppClient
            </summary>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClientBuilder.EnableLogging(Ubiety.Xmpp.Core.Logging.ILogManager)">
            <summary>
                Enable logging with the log manager
            </summary>
            <param name="manager">Log manager to use for logging</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClientBuilder.UseIPv6">
            <summary>
                Enables IPv6 support in the library
            </summary>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClientBuilder.UseSsl">
            <summary>
                Enables SSL support for the socket
            </summary>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Ubiety.Xmpp.Core.XmppClientBuilder.Build">
            <summary>
                Builds the client
            </summary>
            <returns>Client with the options provided</returns>
        </member>
    </members>
</doc>
